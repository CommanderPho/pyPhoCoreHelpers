"""
This type stub file was generated by pyright.
"""

from collections.abc import MutableMapping
from pyphocorehelpers.mixins.diffable import DiffableObject

class DynamicParameters(DiffableObject, MutableMapping):
    """ A class that permits flexible prototyping of parameters and data needed for computations, while still allowing development-time guidance on available members.
    
        From https://treyhunner.com/2019/04/why-you-shouldnt-inherit-from-list-and-dict-in-python/#When_making_a_custom_list_or_dictionary,_remember_you_have_options
        
        The UserDict class implements the interface that dictionaries are supposed to have, but it wraps around an actual dict object under-the-hood.

        The UserList and UserDict classes are for when you want something that acts almost identically to a list or a dictionary but you want to customize just a little bit of functionality.

        The abstract base classes in collections.abc are useful when you want something thatâ€™s a sequence or a mapping but is different enough from a list or a dictionary that you really should be making your own custom class.


    TODO: Observed Issues:
    1. calling .copy() on this object doesn't work, KeyError: 'copy'
    2. pickling sometimes fails, KeyError: 'mro' - SOLUTION: Interestingly this only seems to happen if the top-level item to pickle is a DynamicParameters. Calling .to_dict() and then pickling works even if it has many nested children that are DynamicParameters
        FAILS with KeyError 'mro': `saveData(global_computation_results_pickle_path, (curr_active_pipeline.global_computation_results))`
        WORKS: `saveData(global_computation_results_pickle_path, (curr_active_pipeline.global_computation_results.to_dict()))`
    """
    debug_enabled = ...
    outcome_on_item_not_found = ...
    def __init__(self, **kwargs) -> None:
        ...
    
    def __getitem__(self, key):
        ...
    
    def __delitem__(self, key): # -> None:
        ...
    
    def __setitem__(self, key, value): # -> None:
        ...
    
    def __iter__(self): # -> Iterator[Any]:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __dir__(self): # -> KeysView[Any]:
        ...
    
    def __or__(self, other): # -> DynamicParameters:
        """ Used with vertical bar operator: |
        
        Usage:
            (_test_complete_spike_analysis_config | _test_partial_spike_analysis_config)    
        """
        ...
    
    def __getattr__(self, item):
        ...
    
    def __setattr__(self, attr, value): # -> Callable[[], None] | None:
        ...
    
    @property
    def all_attributes(self): # -> list[Any]:
        """Any attributes on the object. """
        ...
    
    @property
    def original_attributes(self): # -> list[str]:
        """The attributes that were provided initially at init. """
        ...
    
    @property
    def dynamically_added_attributes(self): # -> list[Any]:
        """The attributes that were added dynamically post-init."""
        ...
    
    def has_attr(self, key): # -> bool:
        ...
    
    def __hash__(self) -> int:
        """ custom hash function that allows use in dictionary just based off of the values and not the object instance. """
        ...
    
    def diff(self, other_object): # -> set[Any]:
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        ...
    
    @classmethod
    def init_from_dict(cls, a_dict): # -> Self:
        ...
    
    @classmethod
    def init_from_object(cls, an_object): # -> Self:
        ...
    
    def __getstate__(self): # -> dict[str, Any]:
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    


