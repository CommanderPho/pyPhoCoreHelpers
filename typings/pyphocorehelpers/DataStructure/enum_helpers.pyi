"""
This type stub file was generated by pyright.
"""

from enum import Enum

class ExtendedEnum(Enum):
    """ Allows Inheritors to list their members, values, and names as lists

    Attribution:
        By blueFast answered Feb 28, 2019 at 5:58
        https://stackoverflow.com/a/54919285/9732163

    """
    @classmethod
    def all_members(cls) -> list:
        ...
    
    @classmethod
    def all_member_names(cls) -> list:
        ...
    
    @classmethod
    def all_member_values(cls) -> list:
        ...
    
    @classmethod
    def build_member_value_dict(cls, values_list) -> dict:
        ...
    
    @classmethod
    def init(cls, name=..., value=..., fallback_value=...): # -> Self:
        """ Allows enum values to be initialized from either a name or value (but not both).
            Also allows passthrough of either name or value that are already of the correct type (of Enum type class) and those will just be returned.
                useful for unvalidated parameters

            e.g. FileProgressAction.init('lOaDing') # <FileProgressAction.LOADING: 'Loading'> 
        """
        ...
    


class OrderedEnum(Enum):
    """ An enum that can be compared via comparison operators (like < and <=)
    Usage:
        class PipelineStage(OrderedEnum):
            Input = 0
            Loaded = 1
            Filtered = 2
            Computed = 3
            Displayed = 4
    
    """
    def __ge__(self, other) -> bool:
        ...
    
    def __gt__(self, other) -> bool:
        ...
    
    def __le__(self, other) -> bool:
        ...
    
    def __lt__(self, other) -> bool:
        ...
    


