"""
This type stub file was generated by pyright.
"""

import ipywidgets as widgets
from attrs import define
from typing import Dict, List, Optional

def build_fn_bound_buttons(button_defns, **default_kwargs): # -> dict[Any, Any]:
	""" much simplier version of `JupyterButtonRowWidget` """
	...

@define(slots=False)
class JupyterButtonContainerWidget:
	""" Displays a clickable row of buttons in the Jupyter Notebook that perform any function 
	
	Usage:
		from pyphocorehelpers.gui.Jupyter.JupyterButtonRowWidget import JupyterButtonRowWidget
		from pyphocorehelpers.Filesystem.open_in_system_file_manager import reveal_in_system_file_manager

		# Define the set of buttons:
		button_defns = [("Output Folder", lambda _: reveal_in_system_file_manager(curr_active_pipeline.get_output_path())),
				("global pickle", lambda _: reveal_in_system_file_manager(curr_active_pipeline.global_computation_results_pickle_path)),
				("pipeline pickle", lambda _: reveal_in_system_file_manager(curr_active_pipeline.pickle_path)),
				(".h5 export", lambda _: reveal_in_system_file_manager(curr_active_pipeline.h5_export_path)),
				("ViTables .h5 export", lambda _: reveal_in_system_file_manager(curr_active_pipeline.h5_export_path))
			]

		# Create and display the button
		button_executor = JupyterButtonRowWidget(button_defns=button_defns)

	
	"""
	button_dict: Dict = ...
	root_widget: Optional[widgets.HBox] = ...
	@property
	def button_list(self) -> List:
		...
	
	@classmethod
	def init_from_button_defns(cls, button_defns, defer_display: bool = ...) -> JupyterButtonContainerWidget:
		...
	
	def build_widget(self, button_defns):
		...
	
	def display_buttons(self): # -> None:
		...
	


@define(slots=False)
class JupyterButtonRowWidget(JupyterButtonContainerWidget):
	""" Displays a clickable row of buttons in the Jupyter Notebook that perform any function 
	
	Usage:
		from pyphocorehelpers.gui.Jupyter.JupyterButtonRowWidget import JupyterButtonRowWidget
		from pyphocorehelpers.Filesystem.open_in_system_file_manager import reveal_in_system_file_manager

		# Define the set of buttons:
		button_defns = [("Output Folder", lambda _: reveal_in_system_file_manager(curr_active_pipeline.get_output_path())),
				("global pickle", lambda _: reveal_in_system_file_manager(curr_active_pipeline.global_computation_results_pickle_path)),
				("pipeline pickle", lambda _: reveal_in_system_file_manager(curr_active_pipeline.pickle_path)),
				(".h5 export", lambda _: reveal_in_system_file_manager(curr_active_pipeline.h5_export_path)),
				("ViTables .h5 export", lambda _: reveal_in_system_file_manager(curr_active_pipeline.h5_export_path))
			]

		# Create and display the button
		button_executor = JupyterButtonRowWidget(button_defns=button_defns)

	
	"""
	root_widget: Optional[widgets.HBox] = ...
	def build_widget(self, button_defns): # -> None:
		...
	


@define(slots=False)
class JupyterButtonColumnWidget(JupyterButtonContainerWidget):
	""" Displays a clickable column of buttons in the Jupyter Notebook that perform any function 
	
	Usage:
		from pyphocorehelpers.gui.Jupyter.JupyterButtonRowWidget import JupyterButtonRowWidget
		from pyphocorehelpers.Filesystem.open_in_system_file_manager import reveal_in_system_file_manager

		# Define the set of buttons:
		button_defns = [("Output Folder", lambda _: reveal_in_system_file_manager(curr_active_pipeline.get_output_path())),
				("global pickle", lambda _: reveal_in_system_file_manager(curr_active_pipeline.global_computation_results_pickle_path)),
				("pipeline pickle", lambda _: reveal_in_system_file_manager(curr_active_pipeline.pickle_path)),
				(".h5 export", lambda _: reveal_in_system_file_manager(curr_active_pipeline.h5_export_path)),
				("ViTables .h5 export", lambda _: reveal_in_system_file_manager(curr_active_pipeline.h5_export_path))
			]

		# Create and display the button
		button_executor = JupyterButtonRowWidget(button_defns=button_defns)

	
	"""
	root_widget: Optional[widgets.VBox] = ...
	def build_widget(self, button_defns): # -> None:
		...
	


