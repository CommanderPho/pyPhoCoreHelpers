"""
This type stub file was generated by pyright.
"""

helper_types_list = ...
class PyQtFormatters:
    """Class for managing PyQt5 object formatters in IPython/Jupyter environments.
    
    Example usage:
        from pyphocorehelpers.pyqt_ipython_rendering_helpers import PyQtFormatters
        
        # Create an instance and register formatters
        formatters = PyQtFormatters()
        formatters.register()
        
        # Later, if needed, unregister formatters
        formatters.unregister()
    """
    def __init__(self) -> None:
        """Initialize the formatter class."""
        ...
    
    def register(self): # -> None:
        """Register formatters for PyQt5 objects to get better representation in IPython/Jupyter."""
        ...
    
    def unregister(self): # -> None:
        """Unregister the PyQt5 formatters and restore default formatting."""
        ...
    
    def format_size_policy(self, obj, p): # -> str:
        """Format a QSizePolicy with relevant information.
        
        Args:
            obj: QSizePolicy object
            p: IPython printer
            
        Returns:
            Formatted string representation
        """
        ...
    
    def format_qsize(self, obj, p): # -> str:
        """Format a QSize with width and height.
        
        Args:
            obj: QSize object
            p: IPython printer
            
        Returns:
            Formatted string representation
        """
        ...
    
    def format_qpoint(self, obj, p): # -> str:
        """Format a QPoint with x and y coordinates.
        
        Args:
            obj: QPoint object
            p: IPython printer
            
        Returns:
            Formatted string representation
        """
        ...
    
    def format_qrect(self, rect, p, prefix_string=..., indent_string=..., include_edge_positions=...): # -> str:
        """Format a QRect with position and size.
        From pyphoplacecellanalysis.General.Mixins.DisplayHelpers.debug_print_QRect 2025-04-04 06:24 
        Args:
            obj: QRect object
            p: IPython printer
            
        Returns:
            Formatted string representation
        """
        ...
    
    def format_qwidget(self, obj, p): # -> str:
        """Format a QWidget with limited information to avoid side effects.
        
        Args:
            obj: QWidget object
            p: IPython printer
            
        Returns:
            Formatted string representation
        """
        ...
    
    def format_qobject(self, obj, p): # -> str:
        """Format a generic QObject as fallback.
        
        Args:
            obj: QObject object
            p: IPython printer
            
        Returns:
            Formatted string representation
        """
        ...
    


def register_qt_formatters(): # -> PyQtFormatters:
    """Register robust formatters for PyQt5 objects (legacy function).
    
    This function is maintained for backward compatibility.
    For new code, use PyQtFormatters class directly.
    """
    ...

def unregister_qt_formatters(): # -> None:
    """Unregister the PyQt5 formatters (legacy function).
    
    This function is maintained for backward compatibility.
    For new code, use PyQtFormatters class directly.
    """
    ...

